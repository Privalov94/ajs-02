"use strict";

var tester = require("tester"),
    ajs = require(".."),
    fsTree = require("fs-file-tree"),
    iterateObject = require("iterate-object"),
    readFile = require("read-utf8"),
    readJson = require("r-json");

tester.describe("ajs", function (t) {
    var tree = fsTree.sync(__dirname + "/specs", { camelCase: true });
    iterateObject(tree, function (files, name) {
        if (name.startsWith("_")) {
            return;
        }
        t.should("handle " + name + " cases", function (cb) {
            ajs.render(readFile(files.inputAjs.path), {
                locals: require(files.inputJs.path)
            }, function (err, data) {
                t.expect(err).toBe(null);
                t.expect(data).toBe(readFile(files.outputHtml.path));
                cb();
            });
        });
    });

    var templ = null;
    t.it("compile the file", function (cb) {
        ajs.compileFile(tree.simple.inputAjs.path, function (err, template) {
            templ = template;
            cb();
        });
    });

    t.it("reuse the compiled result", function (cb) {
        templ(require(tree.simple.inputJs.path), function (err, data) {
            t.expect(data).toBe(readFile(tree.simple.outputHtml.path));
            cb();
        });
    });

    t.it("reuse the compiled result again", function (cb) {
        templ(require(tree.simple.inputJs.path), function (err, data) {
            t.expect(data).toBe(readFile(tree.simple.outputHtml.path));
            cb();
        });
    });

    t.it("reuse the compiled result again", function (cb) {
        templ(require(tree.simple.inputJs.path), function (err, data) {
            t.expect(data).toBe(readFile(tree.simple.outputHtml.path));
            cb();
        });
    });

    t.it("handle streams", function (cb) {
        templ(require(tree.encode.inputJs.path)).on("data", function (chunk) {
            t.expect(chunk).toBeA("string");
        }).on("end", cb);
    });
});